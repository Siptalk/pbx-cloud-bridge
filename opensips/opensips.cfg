#
# This script was created by John Matich from Siptalk and is provided 
# as is whereis without warranty of its suitability for your particular use case.
#
# Please refer to the Core CookBook at:
#      https://opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL7

children=4

/* uncomment the following lines to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on reverse DNS on IPs */
auto_aliases=no


include_file "/etc/cloudbridge/opensips-listen.conf"


####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-no-db")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

loadmodule "mid_registrar.so"
modparam("mid_registrar", "mode", 0)
modparam("mid_registrar", "tcp_persistent_flag", "TCP_PERSIST_REGISTRATIONS")

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

loadmodule "proto_udp.so"

loadmodule "exec.so"

####### Routing Logic ########

# main request routing logic

route{

	if (!mf_process_maxfwd_header("10")) {
		send_reply("483","Too Many Hops");
		exit;
	}
	
	$var(out) = NULL;
	$var(netstat) = "online";
	exec("cat /tmp/cloudbridge-netstat",,"$var(out)");
	if($var(out) =~ "offline"){
		$var(netstat) = "offline";
	}
	
	exec("cat /etc/cloudbridge/sip-config.ini",,"$var(out)");
	$var(alwayslocal) 	= $(var(out){param.value,alwayslocal});

	$var(str_dot) = ".";
    $var(ri_24) = $(Ri{s.substr,0,$(Ri{s.rindex, $var(str_dot)})});
    $var(si_24) = $(si{s.substr,0,$(si{s.rindex, $var(str_dot)})});

    
	if (has_totag()) {
	    xlog("L_INFO","HAS TOTAG - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");

		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply("404","Not here");
			exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("log","failed");
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		exit;
	}

    xlog("L_INFO","New request - M=$rm RURI=$ru F=$fu T=$tu IP=$si ID=$ci\n");

	# reply to options
	if(is_method("OPTIONS")){
		send_reply("200","OK");
		exit;
	}


	# CANCEL processing
	if (is_method("CANCEL|BYE")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();


	if (is_method("REGISTER")) {
		# if the request is from an address range outside of our local network
		if($var(ri_24) != $var(si_24)){
			send_reply("403","Registration Denied");
			exit;
		}

		if($var(netstat) =~ "offline"){
			xlog("L_INFO", "saving REGISTER locally...\n");
			save("location");
			exit;
		}else{
			xlog("L_INFO", "forwarding REGISTER to main registrar...\n");
			mid_registrar_save("location");
		}

	}


	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
			"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			send_reply("403","Preload Route denied");
		exit;
	}


	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();


	# account only INVITEs
	if (is_method("INVITE")) {
		
	    xlog("L_INFO","INVITE - $var(out) M=$rm user=$rU RURI=$ru fromuser=$fU fromdomain=$fd F=$fu T=$tu IP=$si ID=$ci\n");

	    # if the caller is from the local network, relay the call
	    if($var(ri_24) == $var(si_24)){

	    	xlog("L_INFO","INVITE FROM LOCAL - M=$rm user=$rU RURI=$ru fromuser=$fU fromdomain=$fd F=$fu T=$tu IP=$si ID=$ci\n");

	    	# perform local lookup on all calls if 'alwayslocal' config var is yes .. or the net is down
	    	if($var(alwayslocal) =~ "yes" || $var(netstat) =~ "offline"){
				if (!lookup("location")) {
					mid_registrar_lookup("location");
				}
	    	}
	    }else{

	    	xlog("L_INFO","INVITE FROM EXTERNAL - M=$rm user=$rU RURI=$ru fromuser=$fU fromdomain=$fd F=$fu T=$tu IP=$si ID=$ci\n");

		    # it's an external call bound for a registered extension
			if (!lookup("location")) {
				if (!mid_registrar_lookup("location")){
					t_reply("404", "Not Found");
					exit;
				}
			}
		}
		
		do_accounting("log");

	}



	route(relay);
	exit;

}


route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	}
	exit;
}


branch_route[per_branch_ops] {
	xlog("new pbo branch at $ru\n");
}


onreply_route[handle_nat] {
	xlog("incoming reply\n");
}


failure_route[missed_call] {

	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

	
}

